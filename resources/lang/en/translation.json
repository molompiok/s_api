{
  "validationFailed": "Data validation failed.",
  "product": {
    "viewRequired": "A main image is required for the product.",
    "priceTooHigh": "The price must not exceed {{max}}.",
    "barredPriceTooHigh": "The crossed-out price must not exceed {{max}}.",
    "barredPriceInvalid": "The crossed-out price must be greater than 0.",
    "priceInvalid": "The product price must be greater than 0.",
    "defaultVariantFeatureName": "Default Variant",
    "createdSuccess": "Product successfully created.",
    "creationFailed": "Failed to create product.",
    "fetchFailed": "Error while retrieving products.",
    "updateSuccess": "Product successfully updated.",
    "updateFailed": "Failed to update product.",
    "deleteSuccess": "Product successfully deleted.",
    "deleteFailed": "Failed to delete product.",
    "notFound": "Product not found.",
    "barredPriceInvalidRange": "The crossed-out price must be a positive number less than or equal to {{max}}.",
    "priceInvalidRange": "The price must be a positive number less than or equal to {{max}}."
  },
  "feature": {
    "createdSuccess": "Feature successfully created.",
    "creationFailed": "Failed to create feature.",
    "fetchFailed": "Error while retrieving features.",
    "fetchWithValuesFailed": "Error while retrieving features and their values.",
    "updateSuccess": "Feature successfully updated.",
    "updateFailed": "Failed to update feature.",
    "deleteSuccess": "Feature successfully deleted.",
    "deleteFailed": "Failed to delete feature.",
    "notFound": "Feature not found.",
    "multipleUpdateSuccess": "Bulk update of features and values successful.",
    "multipleUpdateFailed": "Bulk update of features and values failed.",
    "invalidJsonPayload": "Invalid data for bulk update (expected JSON format).",
    "cannotDeleteDefault": "Cannot delete the product's default feature."
  },
  "value": {
    "invalidColorKey": "The color key '{{key}}' is invalid for value {{value}}.",
    "textRequired": "Text is required for this type of value.",
    "createdSuccess": "Value successfully created.",
    "creationFailed": "Failed to create value.",
    "fetchFailed": "Error while retrieving values.",
    "updateSuccess": "Value successfully updated.",
    "updateFailed": "Failed to update value.",
    "deleteFailed": "Failed to delete value.",
    "notFound": "Value not found.",
    "idRequired": "Value ID is required.",
    "orFeatureNotFound": "Value or parent feature not found."
  },
  "detail": {
    "createdSuccess": "Detail successfully created.",
    "creationFailed": "Failed to create detail.",
    "idOrProductIdRequired": "Detail ID or product ID is required.",
    "notFound": "Detail not found.",
    "fetchFailed": "Error while retrieving details.",
    "updateSuccess": "Detail successfully updated.",
    "updateFailed": "Failed to update detail.",
    "deleteSuccess": "Detail successfully deleted.",
    "deleteFailed": "Failed to delete detail.",
    "idRequired": "Detail ID is required."
  },
  "favorite": {
    "alreadyExists": "This product is already in your favorites.",
    "createdSuccess": "Product successfully added to favorites.",
    "creationFailed": "Failed to add product to favorites.",
    "notFound": "Favorite not found.",
    "fetchFailed": "Error while retrieving favorites.",
    "updateSuccess": "Favorite successfully updated.",
    "updateFailed": "Failed to update favorite.",
    "deleteSuccess": "Favorite successfully deleted.",
    "deleteFailed": "Failed to delete favorite."
  },
  "globalSearch": {
    "searchFailed": "Global search failed."
  },
  "importExport": {
    "noDataToImport": "No product or category data provided for import.",
    "importSuccess": "Data imported successfully.",
    "importFailed": "Data import failed.",
    "exportFailed": "Data export failed."
  },
  "inventory": {
    "createdSuccess": "Inventory point successfully created.",
    "creationFailed": "Failed to create inventory point.",
    "notFound": "Inventory point not found.",
    "fetchFailed": "Error while retrieving inventory points.",
    "updateSuccess": "Inventory point successfully updated.",
    "updateFailed": "Failed to update inventory point.",
    "deleteSuccess": "Inventory point successfully deleted.",
    "deleteFailed": "Failed to delete inventory point.",
    "idRequired": "Inventory point ID is required."
  },
  "collaborator": {
    "userNotFound": "User with email {{email}} not found.",
    "cannotAddOwner": "You cannot add the owner as a collaborator.",
    "alreadyCollaborator": "This user is already a collaborator.",
    "createdSuccess": "Collaborator successfully added.",
    "creationFailed": "Failed to add collaborator.",
    "cannotEditOwnerPerms": "You cannot edit the owner's permissions.",
    "notFound": "Collaborator not found.",
    "permsUpdateSuccess": "Collaborator permissions successfully updated.",
    "permsUpdateFailed": "Failed to update collaborator permissions.",
    "listFailed": "Failed to list collaborators.",
    "cannotRemoveOwner": "You cannot remove the owner.",
    "removeSuccess": "Collaborator successfully removed.",
    "removeFailed": "Failed to remove collaborator."
  },
  "stats": {
    "fetchFailed": "Error while retrieving statistics."
  },
  "address": {
    "createdSuccess": "Address successfully created.",
    "creationFailed": "Failed to create address.",
    "notFound": "Address not found.",
    "fetchFailed": "Error while retrieving addresses.",
    "updateSuccess": "Address successfully updated.",
    "updateFailed": "Failed to update address.",
    "deleteFailed": "Failed to delete address."
  },
  "order": {
    "cartEmpty": "The cart is empty. Cannot create order.",
    "createdSuccess": "Order successfully created.",
    "creationFailed": "Failed to create order.",
    "cartNotFound": "Cart not found for this user.",
    "fetchFailed": "Error while retrieving orders.",
    "fetchAllFailed": "Error while retrieving order list.",
    "notFound": "Order not found.",
    "invalidStatusTransition": "Cannot change status from '{{from}}' to '{{to}}'.",
    "updateSuccess": "Order successfully updated.",
    "updateFailed": "Failed to update order.",
    "deleteSuccess": "Order successfully deleted.",
    "deleteFailed": "Failed to delete order."
  },
  "phone": {
    "createdSuccess": "Phone number successfully created.",
    "creationFailed": "Failed to create phone number.",
    "notFound": "Phone number not found.",
    "fetchFailed": "Error while retrieving phone numbers.",
    "updateSuccess": "Phone number successfully updated.",
    "updateFailed": "Failed to update phone number.",
    "deleteFailed": "Failed to delete phone number."
  },
  "user": {
    "notFound": "User not found.",
    "fetchFailed": "Error while retrieving users."
  },
  "visit": {
    "throttled": "Last visit too recent (less than an hour).",
    "recordedSuccess": "New visit recorded.",
    "recordFailed": "Failed to record visit.",
    "fetchFailed": "Error while retrieving visit data."
  },
  "debug": {
    "storeIdMissing": "Internal configuration missing: STORE_ID not set.",
    "scaleUpSent": "Scale-up request sent (Job ID: {{jobId}}).",
    "scaleUpFailed": "Failed to send scale-up request.",
    "scaleDownSent": "Scale-down request sent (Job ID: {{jobId}}).",
    "scaleDownFailed": "Failed to send scale-down request."
  },
  "comment": {
    "orderItemNotFound": "Associated order item not found.",
    "cannotCommentOthersItem": "You can only comment on items you purchased.",
    "alreadyCommented": "You have already commented on this item.",
    "createdSuccess": "Comment successfully created.",
    "creationFailed": "Failed to create comment.",
    "notFound": "Comment not found.",
    "notFoundForItem": "No comment found for this order item.",
    "fetchFailed": "Error while retrieving comment.",
    "fetchListFailed": "Error while retrieving comment list.",
    "cannotUpdateOthers": "You can only update your own comments.",
    "updateSuccess": "Comment successfully updated.",
    "updateFailed": "Failed to update comment.",
    "cannotDeleteOthers": "You can only delete your own comments or must have moderation rights.",
    "deleteSuccess": "Comment successfully deleted.",
    "deleteFailed": "Failed to delete comment."
  },
  "auth": {
    "socialCallbackFailed": "Internal error processing social login.",
    "emailNotVerified": "Please verify your email before logging in.",
    "loginSuccess": "Login successful.",
    "invalidCredentials": "Incorrect email or password.",
    "loginFailed": "Login failed.",
    "emailConflict": "An account already exists with this email address.",
    "registerSuccess": "Registration successful! Please check your inbox to activate your account.",
    "registerFailed": "An error occurred during registration.",
    "invalidOrExpiredToken": "The verification link is invalid or has expired.",
    "emailAlreadyVerified": "Your email is already verified.",
    "emailVerificationSuccess": "Email successfully verified. You can now log in.",
    "emailVerificationFailedDb": "Error updating email verification status.",
    "resendGenericResponse": "If an account with this email exists and is not verified, a new verification email has been sent.",
    "resendFailedInternal": "Internal error while resending verification email.",
    "logoutAllSuccess": "Logged out from all devices successfully.",
    "logoutAllFailed": "Failed to log out from all devices.",
    "notAuthenticated": "User not authenticated.",
    "logoutSuccess": "Logout successful.",
    "logoutCompletedWithIssues": "Logout completed (session/token may have already been invalid).",
    "fetchMeFailed": "Error while retrieving user information.",
    "profileUpdateSuccess": "Profile successfully updated.",
    "profileUpdateFailed": "Failed to update profile.",
    "accountDeleteSuccess": "Account successfully deleted.",
    "accountDeleteFailed": "Failed to delete account."
  },
  "emails": {
    "verifySubject": "Verify your email address - Sublymus"
  },
  "cart": {
    "negativeQuantityNotAllowed": "Quantity cannot be negative.",
    "positiveValueRequiredForIncDec": "Increment/decrement value must be a positive integer.",
    "cannotDecrement": "Cannot decrement: current quantity ({{current}}) is less than requested ({{requested}}).",
    "maxStockUndefined": "Cannot add max quantity: max stock not defined for this product/variant.",
    "quantityExceedsStock": "Requested quantity ({{quantity}}) exceeds available stock ({{stock}}).",
    "updateSuccess": "Cart updated successfully (Mode: {{mode}}).",
    "updateFailed": "Error updating cart.",
    "fetchFailed": "Error retrieving cart.",
    "noGuestCartToMerge": "No guest cart to merge.",
    "guestCartEmptyOrNotFound": "Guest cart is empty or not found.",
    "mergeSuccess": "Cart successfully merged.",
    "mergeFailed": "Cart merge failed."
  },
  "category": {
    "notFound": "Category not found.",
    "fetchFailed": "Error retrieving categories.",
    "fetchSubFailed": "Error retrieving subcategories.",
    "fetchFiltersFailed": "Error retrieving filters.",
    "parentNotFound": "Parent category (ID: {{id}}) not found.",
    "createdSuccess": "Category successfully created.",
    "creationFailed": "Failed to create category.",
    "cannotBeOwnParent": "A category cannot be its own parent.",
    "fileUpdateFailed": "File update failed for '{{field}}'.",
    "updateSuccess": "Category successfully updated.",
    "updateFailed": "Failed to update category.",
    "deleteSuccess": "Category successfully deleted.",
    "deleteFailed": "Failed to delete category."
  },
  "invalid_value": "The value of the field \"{{ key }}\" is invalid: {{ value }}",
  "unauthorized_action": "You are not authorized to perform this action.",
  "auth_required": "Authentication required.",
  "missing_parameter": "The field \"{{ field }}\" is required.",
  "invalid_type": "Invalid type for the field \"{{ field }}\".",
  "not_found": "The requested item was not found.",
  "success": "Operation completed successfully.",
  "error_occurred": "An error occurred. Please try again later."
}
